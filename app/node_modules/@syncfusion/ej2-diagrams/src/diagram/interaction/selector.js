var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Property, ChildProperty, Collection, Complex } from '@syncfusion/ej2-base';
import { Container } from '../core/containers/container';
import { Node } from '../objects/node';
import { Connector } from '../objects/connector';
import { Point } from '../primitives/point';
import { Size } from '../primitives/size';
import { SelectorConstraints } from '../enum/enum';
import { Margin } from '../core/appearance';
/**
 * A collection of frequently used commands that will be added around the selector
 * ```html
 * <div id='diagram'></div>
 * ```
 * ```typescript
 * let nodes: NodeModel[] = [{
 *           id: 'node1', width: 100, height: 100, offsetX: 100, offsetY: 100,
 *           annotations: [{ content: 'Default Shape' }]
 *       },
 *       {
 *           id: 'node2', width: 100, height: 100, offsetX: 300, offsetY: 100,
 *           shape: {
 *               type: 'Basic', shape: 'Ellipse'
 *           },
 *           annotations: [{ content: 'Path Element' }]
 *       }
 *       ];
 *       let connectors: ConnectorModel[] = [{
 *           id: 'connector1',
 *           type: 'Straight',
 *           sourcePoint: { x: 100, y: 300 },
 *           targetPoint: { x: 200, y: 400 },
 *       }];
 * let handle: UserHandleModel[] = [
 * { name: 'handle', margin: { top: 0, bottom: 0, left: 0, right: 0 }, offset: 0,
 * pathData: 'M 376.892,225.284L 371.279,211.95L 376.892,198.617L 350.225,211.95L 376.892,225.284 Z',
 * side: 'Top', horizontalAlignment: 'Center', verticalAlignment: 'Center',
 * pathColor: 'yellow' }];
 * let diagram: Diagram = new Diagram({
 * ...
 *     connectors: connectors, nodes: nodes,
 *     selectedItems: { constraints: SelectorConstraints.All, userHandles: handle },
 * ...
 * });
 * diagram.appendTo('#diagram');
 * ```
 * @default {}
 */
var UserHandle = /** @class */ (function (_super) {
    __extends(UserHandle, _super);
    function UserHandle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('')
    ], UserHandle.prototype, "name", void 0);
    __decorate([
        Property('')
    ], UserHandle.prototype, "pathData", void 0);
    __decorate([
        Property('#000000')
    ], UserHandle.prototype, "backgroundColor", void 0);
    __decorate([
        Property('top')
    ], UserHandle.prototype, "side", void 0);
    __decorate([
        Property('')
    ], UserHandle.prototype, "borderColor", void 0);
    __decorate([
        Property(0.5)
    ], UserHandle.prototype, "borderWidth", void 0);
    __decorate([
        Property(25)
    ], UserHandle.prototype, "size", void 0);
    __decorate([
        Property('white')
    ], UserHandle.prototype, "pathColor", void 0);
    __decorate([
        Property(10)
    ], UserHandle.prototype, "displacement", void 0);
    __decorate([
        Property(true)
    ], UserHandle.prototype, "visible", void 0);
    __decorate([
        Property(0)
    ], UserHandle.prototype, "offset", void 0);
    __decorate([
        Complex({}, Margin)
    ], UserHandle.prototype, "margin", void 0);
    __decorate([
        Property('Center')
    ], UserHandle.prototype, "horizontalAlignment", void 0);
    __decorate([
        Property('Center')
    ], UserHandle.prototype, "verticalAlignment", void 0);
    return UserHandle;
}(ChildProperty));
export { UserHandle };
/**
 * Defines the size and position of selected items and defines the appearance of selector
 */
var Selector = /** @class */ (function (_super) {
    __extends(Selector, _super);
    function Selector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Initializes the UI of the container
     */
    Selector.prototype.init = function (diagram) {
        var container = new Container();
        container.measureChildren = false;
        var consize = new Size();
        container.children = [];
        if (this.annotation) {
            var object = (this.nodes.length > 0) ? diagram.nameTable[this.nodes[0].id].wrapper :
                diagram.nameTable[this.connectors[0].id].wrapper;
            var wrapper = diagram.getWrapper(object, this.annotation.id);
            container.children.push(wrapper);
        }
        else {
            if (this.nodes || this.connectors) {
                for (var i = 0; i < this.nodes.length; i++) {
                    var node = diagram.nameTable[this.nodes[i].id];
                    var wrapper = node.wrapper;
                    // this.width = wrapper.actualSize.width; 
                    // this.height = wrapper.actualSize.height;
                    // this.rotateAngle = wrapper.rotateAngle;
                    // this.offsetX = wrapper.offsetX;
                    // this.offsetY = wrapper.offsetY;
                    container.children.push(wrapper);
                }
                for (var j = 0; j < this.connectors.length; j++) {
                    var connector = diagram.nameTable[this.connectors[j].id];
                    var wrapper = connector.wrapper;
                    // this.width = wrapper.actualSize.width; this.height = wrapper.actualSize.height;
                    // this.rotateAngle = wrapper.rotateAngle; this.offsetX = wrapper.offsetX;
                    // this.offsetY = wrapper.offsetY;
                    container.children.push(wrapper);
                }
            }
        }
        this.wrapper = container;
        return container;
    };
    __decorate([
        Property(null)
    ], Selector.prototype, "wrapper", void 0);
    __decorate([
        Collection([], Node)
    ], Selector.prototype, "nodes", void 0);
    __decorate([
        Collection([], Connector)
    ], Selector.prototype, "connectors", void 0);
    __decorate([
        Property()
    ], Selector.prototype, "width", void 0);
    __decorate([
        Property()
    ], Selector.prototype, "height", void 0);
    __decorate([
        Property(0)
    ], Selector.prototype, "rotateAngle", void 0);
    __decorate([
        Property(0)
    ], Selector.prototype, "offsetX", void 0);
    __decorate([
        Property(0)
    ], Selector.prototype, "offsetY", void 0);
    __decorate([
        Complex({ x: 0.5, y: 0.5 }, Point)
    ], Selector.prototype, "pivot", void 0);
    __decorate([
        Property('CompleteIntersect')
    ], Selector.prototype, "rubberBandSelectionMode", void 0);
    __decorate([
        Collection([], UserHandle)
    ], Selector.prototype, "userHandles", void 0);
    __decorate([
        Property(SelectorConstraints.All)
    ], Selector.prototype, "constraints", void 0);
    return Selector;
}(ChildProperty));
export { Selector };
