import { NodeModel } from '../objects/node-model';
import { Node } from '../objects/node';
import { Diagram } from '../diagram';
import { ConnectorModel } from '../objects/connector-model';
import { PointModel } from '../primitives/point-model';
import { SelectorModel } from './selector-model';
import { GridPanel, RowDefinition, ColumnDefinition } from '../core/containers/grid';
import { Rect } from '../primitives/rect';
import { DiagramElement } from '../core/elements/diagram-element';
import { Actions } from './actions';
import { Container } from '../core/containers/container';
/**
 * Interaction for Container
 */
/** @private */
export declare function updateCanvasBounds(diagram: Diagram, obj: NodeModel | ConnectorModel, position: PointModel, isBoundsUpdate: boolean): void;
/** @private */
export declare function findBounds(obj: NodeModel, columnIndex: number, isHeader: boolean): Rect;
/** @private */
export declare function createHelper(diagram: Diagram, obj: Node): Node;
/** @private */
export declare function renderContainerHelper(diagram: Diagram, obj: SelectorModel | NodeModel): NodeModel | ConnectorModel;
/** @private */
export declare function checkParentAsContainer(diagram: Diagram, obj: NodeModel | ConnectorModel, isChild?: boolean): boolean;
/** @private */
export declare function checkChildNodeInContainer(diagram: Diagram, obj: NodeModel): void;
/**
 * @private
 */
export declare function addChildToContainer(diagram: Diagram, parent: NodeModel, node: NodeModel): void;
/** @private */
export declare function renderStackHighlighter(element: DiagramElement, isVertical: Boolean, position: PointModel, diagram: Diagram, isUml?: boolean): void;
/** @private */
export declare function moveChildInStack(sourceNode: Node, target: Node, diagram: Diagram, action: Actions): void;
/** @private */
export declare function initSwimLane(grid: GridPanel, diagram: Diagram, node: NodeModel): void;
/** @private */
export declare function addObjectToGrid(diagram: Diagram, grid: GridPanel, parent: NodeModel, object: NodeModel, isHeader?: boolean): Container;
/** @private */
export declare function headerDefine(grid: GridPanel, diagram: Diagram, object: NodeModel): void;
/** @private */
export declare function phaseDefine(grid: GridPanel, diagram: Diagram, object: NodeModel, indexValue: number, orientation: boolean): void;
/** @private */
export declare function laneCollection(grid: GridPanel, diagram: Diagram, object: NodeModel, indexValue: number, laneIndex: number, orientation: boolean): void;
/** @private */
export declare function createRow(row: RowDefinition[], height: number): void;
/** @private */
export declare function createColumn(width: number): ColumnDefinition;
/** @private */
export declare function initGridRow(row: RowDefinition[], orientation: boolean, object: NodeModel): void;
/** @private */
export declare function initGridColumns(columns: ColumnDefinition[], orientation: boolean, object: NodeModel): void;
