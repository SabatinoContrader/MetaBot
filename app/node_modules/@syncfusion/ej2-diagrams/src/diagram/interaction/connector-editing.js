var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Point } from '../primitives/point';
import { Rect } from '../primitives/rect';
import { intersect3 } from '../utility/diagram-util';
import { cloneObject } from '../utility/base-util';
import { contains } from './actions';
import { getOppositeDirection } from '../utility/connector';
import { StraightSegment, OrthogonalSegment } from '../objects/connector';
import { ToolBase } from './tool';
/**
 * Multiple segments editing for Connector
 */
var ConnectorEditing = /** @class */ (function (_super) {
    __extends(ConnectorEditing, _super);
    function ConnectorEditing(commandHandler, endPoint) {
        var _this = _super.call(this, commandHandler, true) || this;
        _this.endPoint = endPoint;
        return _this;
    }
    /**   @private  */
    ConnectorEditing.prototype.mouseDown = function (args) {
        this.inAction = true;
        this.undoElement = cloneObject(args.source);
        _super.prototype.mouseDown.call(this, args);
        var connectors;
        if (args.source && args.source.connectors) {
            connectors = args.source.connectors[0];
        }
        // Sets the selected segment         
        for (var i = 0; i < connectors.segments.length; i++) {
            var segment = connectors.segments[i];
            if (this.endPoint === 'OrthoThumb') {
                for (var j = 0; j < segment.points.length - 1; j++) {
                    var segPoint = { x: 0, y: 0 };
                    segPoint.x = ((segment.points[j].x + segment.points[j + 1].x) / 2);
                    segPoint.y = ((segment.points[j].y + segment.points[j + 1].y) / 2);
                    if (contains(this.currentPosition, segPoint, 30)) {
                        this.selectedSegment = segment;
                        this.segmentIndex = j;
                    }
                }
            }
            else {
                if (contains(this.currentPosition, segment.point, 10)) {
                    this.selectedSegment = segment;
                }
            }
        }
    };
    /**   @private  */
    ConnectorEditing.prototype.mouseMove = function (args) {
        _super.prototype.mouseMove.call(this, args);
        this.currentPosition = args.position;
        if (this.currentPosition && this.prevPosition) {
            var diffY = this.currentPosition.y - this.prevPosition.y;
            var diffX = this.currentPosition.x - this.prevPosition.x;
            this.currentPosition = this.commandHandler.snapConnectorEnd(this.currentPosition);
            var connector = void 0;
            if (args.source && args.source.connectors) {
                connector = args.source.connectors[0];
            }
            if (this.inAction && this.endPoint !== undefined && diffX !== 0 || diffY !== 0) {
                if (this.endPoint === 'OrthoThumb') {
                    this.blocked = !this.dragOrthogonalSegment(connector, this.selectedSegment, this.currentPosition, this.segmentIndex);
                }
                else {
                    var tx = this.currentPosition.x - this.selectedSegment.point.x;
                    var ty = this.currentPosition.y - this.selectedSegment.point.y;
                    var index = connector.segments.indexOf(this.selectedSegment);
                    this.blocked = !this.commandHandler.dragControlPoint(connector, tx, ty, false, index);
                }
                this.commandHandler.updateSelector();
            }
        }
        this.prevPosition = this.currentPosition;
        return !this.blocked;
    };
    /**   @private  */
    ConnectorEditing.prototype.mouseUp = function (args) {
        var connector;
        if (args.source && args.source.connectors) {
            connector = args.source.connectors[0];
        }
        if (args && args.source && args.info && args.info.ctrlKey && args.info.shiftKey && connector.type === 'Straight') {
            this.addOrRemoveSegment(connector, this.currentPosition);
        }
        else {
            if (this.endPoint === 'OrthoThumb' && this.selectedSegment) {
                var index = connector.segments.indexOf(this.selectedSegment);
                var prev = connector.segments[index - 1];
                var next = connector.segments[index + 1];
                if (index === connector.segments.length - 2
                    && this.updateLastSegment(connector, this.selectedSegment)) {
                    connector.segments.splice(connector.segments.length - 2, 1);
                }
                else {
                    if (prev && Math.abs(prev.length) < 5) {
                        if (index !== 1) {
                            this.removePrevSegment(connector, index);
                        }
                    }
                    else if (next) {
                        var len = Point.distancePoints(next.points[0], next.points[1]);
                        var length_1 = ((next.length || next.length === 0) ? next.length : len);
                        if ((Math.abs(length_1) <= 5)) {
                            this.removeNextSegment(connector, index);
                        }
                    }
                }
                this.commandHandler.updateEndPoint(connector);
            }
        }
        if (this.undoElement) {
            var obj = void 0;
            obj = cloneObject(args.source);
            var entry = {
                type: 'SegmentChanged', redoObject: obj, undoObject: this.undoElement, category: 'Internal'
            };
            this.commandHandler.addHistoryEntry(entry);
        }
        _super.prototype.mouseUp.call(this, args);
    };
    ConnectorEditing.prototype.removePrevSegment = function (connector, index) {
        var first = connector.segments[index - 2];
        var next = connector.segments[index + 1];
        var length = (next.length || next.length === 0) ? next.length : Point.distancePoints(next.points[0], next.points[1]);
        if (!(length <= 5)) {
            var last = connector.segments[index + 1];
            connector.segments.splice(index - 1, 2);
            var segment = this.selectedSegment;
            if (segment.direction === 'Left' || segment.direction === 'Right') {
                first.points[first.points.length - 1].x = last.points[0].x;
                last.points[0].y = first.points[first.points.length - 1].y;
            }
            else {
                first.points[first.points.length - 1].y = last.points[0].y;
                last.points[0].x = first.points[first.points.length - 1].x;
            }
            if (segment.length || segment.length === 0) {
                this.findSegmentDirection(first);
            }
            this.findSegmentDirection(last);
        }
    };
    ConnectorEditing.prototype.findSegmentDirection = function (segment) {
        if (segment.direction && (segment.length || segment.length === 0)) {
            segment.length = Point.distancePoints(segment.points[0], segment.points[segment.points.length - 1]);
            segment.direction = Point.direction(segment.points[0], segment.points[segment.points.length - 1]);
        }
    };
    ConnectorEditing.prototype.removeNextSegment = function (connector, index) {
        var segment = this.selectedSegment;
        var first = connector.segments[index - 1];
        var last = connector.segments[index + 2];
        var next = connector.segments[index + 1];
        if (next.length || next.length === 0) {
            connector.segments.splice(index, 2);
            if (segment.direction === 'Top' || segment.direction === 'Bottom') {
                last.points[0].y = segment.points[0].y;
                first.points[first.points.length - 1].x = last.points[0].x;
            }
            else {
                last.points[0].x = segment.points[0].x;
                first.points[first.points.length - 1].y = last.points[0].y;
            }
        }
        else {
            connector.segments.splice(index + 1, 1);
            if (segment.direction === 'Top' || segment.direction === 'Bottom') {
                first.points[first.points.length - 1].x = next.points[next.points.length - 1].x;
            }
            else {
                first.points[first.points.length - 1].y = next.points[next.points.length - 1].y;
            }
            this.findSegmentDirection(first);
            segment.length = segment.direction = null;
        }
        if (first && last) {
            first.length = Point.distancePoints(first.points[0], last.points[0]);
            first.direction = Point.direction(first.points[0], last.points[0]);
            if (last.length || last.length === 0) {
                last.length = Point.distancePoints(first.points[first.points.length - 1], last.points[last.points.length - 1]);
                var point1 = first.points;
                var point2 = last.points;
                last.direction = Point.direction(point1[point1.length - 1], point2[point2.length - 1]);
            }
        }
    };
    ConnectorEditing.prototype.addOrRemoveSegment = function (connector, point) {
        var updateSeg;
        var segmentIndex;
        for (var i = 0; i < connector.segments.length; i++) {
            var segment = (connector.segments)[i];
            if (contains(point, segment.point, connector.hitPadding)) {
                segmentIndex = i;
                updateSeg = true;
            }
        }
        if (updateSeg && segmentIndex !== undefined) {
            if (connector.segments && connector.segments[segmentIndex] && connector.segments[segmentIndex].type === 'Straight') {
                var segment = connector.segments[segmentIndex];
                var previous = connector.segments[segmentIndex + 1];
                if (previous) {
                    connector.segments.splice(segmentIndex, 1);
                    previous.points[0] = segment.points[0];
                }
            }
        }
        else {
            var index = this.findIndex(connector, point);
            if (connector.segments && connector.segments[index] && connector.segments[index].type === 'Straight') {
                var segment = connector.segments[index];
                var newseg = new StraightSegment(connector, 'segments', { type: 'Straight', point: point }, true);
                newseg.points[0] = segment.points[0];
                newseg.points[1] = point;
                segment.points[0] = point;
                connector.segments.splice(index, 0, newseg);
                updateSeg = true;
            }
        }
        if (updateSeg) {
            this.commandHandler.updateEndPoint(connector);
        }
    };
    ConnectorEditing.prototype.findIndex = function (connector, point) {
        var intersectingSegs = [];
        for (var i = 0; i < connector.segments.length; i++) {
            var segment = connector.segments[i];
            var rect = Rect.toBounds([segment.points[0], segment.points[1]]);
            rect.Inflate(connector.hitPadding);
            if (rect.containsPoint(point)) {
                intersectingSegs.push(segment);
            }
        }
        if (intersectingSegs.length === 1) {
            return connector.segments.indexOf(intersectingSegs[0]);
        }
        else {
            var ratio = void 0;
            var min = void 0;
            var index = void 0;
            var seg = void 0;
            var v = void 0;
            var h = void 0;
            for (var i = 0; i < intersectingSegs.length; i++) {
                seg = intersectingSegs[i];
                v = (point.y - seg.points[0].y) / (seg.points[1].y - point.y);
                h = (point.x - seg.points[0].x) / (seg.points[1].x - point.x);
                ratio = Math.abs(v - h);
                if (i === 0) {
                    min = ratio;
                    index = 0;
                }
                if (ratio < min) {
                    min = ratio;
                    index = i;
                }
            }
            return connector.segments.indexOf(intersectingSegs[index]);
        }
    };
    ConnectorEditing.prototype.dragOrthogonalSegment = function (obj, segment, point, segmentIndex) {
        var segmentPoint = { x: 0, y: 0 };
        segmentPoint.x = ((segment.points[segmentIndex].x + segment.points[segmentIndex + 1].x) / 2);
        segmentPoint.y = ((segment.points[segmentIndex].y + segment.points[segmentIndex + 1].y) / 2);
        var ty = point.y - segmentPoint.y;
        var tx = point.x - segmentPoint.x;
        var index = obj.segments.indexOf(segment);
        var update = false;
        var orientation = (segment.points[0].y.toFixed(2) === segment.points[1].y.toFixed(2)) ? 'horizontal' : 'vertical';
        var prevSegment;
        var nextSegment;
        if (index !== -1) {
            if (index === 0 && obj.segments.length === 1 && segment.points.length === 2) {
                index = this.addSegments(obj, segment, tx, ty, index);
                update = true;
            }
            else if (index === obj.segments.length - 1 && (segment.direction === null || segment.length === null)) {
                index = this.addTerminalSegment(obj, segment, tx, ty, segmentIndex);
                update = true;
            }
            else if (index === 0) {
                index = this.insertFirstSegment(obj, segment, tx, ty, index);
                update = true;
            }
            if (update) {
                this.selectedSegment = segment = obj.segments[index];
                this.segmentIndex = 0;
            }
            this.updateAdjacentSegments(obj, index, tx, ty);
            this.commandHandler.updateEndPoint(obj);
        }
        return true;
    };
    ConnectorEditing.prototype.addSegments = function (obj, segment, tx, ty, coll) {
        var index;
        var direction;
        var segments = [];
        var len;
        var length = Point.distancePoints(segment.points[0], segment.points[1]);
        var segmentDirection = Point.direction(segment.points[0], segment.points[1]);
        segments.push(new OrthogonalSegment(obj, 'segments', { type: 'Orthogonal', direction: segmentDirection, length: length / 4 }, true));
        direction = (segment.points[0].y === segment.points[1].y) ? ((ty > 0) ? 'Bottom' : 'Top') : ((tx > 0) ? 'Right' : 'Left');
        len = (segment.points[0].x === segment.points[1].x) ? ty : tx;
        segments.push(new OrthogonalSegment(obj, 'segments', { type: 'Orthogonal', direction: direction, length: len }, true));
        segments.push(new OrthogonalSegment(obj, 'segments', { type: 'Orthogonal', direction: segmentDirection, length: length / 2 }, true));
        obj.segments = segments.concat(obj.segments);
        index = coll + 2;
        return index;
    };
    ConnectorEditing.prototype.insertFirstSegment = function (obj, segment, tx, ty, coll) {
        var direction;
        var length;
        var segments = [];
        var segValues;
        var index;
        var insertseg;
        if (obj.sourcePortID && segment.length && obj.segments[0].points.length > 2) {
            obj.segments.splice(0, 1);
            var prev = void 0;
            for (var i = 0; i < segment.points.length - 1; i++) {
                var len = Point.distancePoints(segment.points[i], segment.points[i + 1]);
                var dir = Point.direction(segment.points[i], segment.points[i + 1]);
                insertseg = new OrthogonalSegment(obj, 'segments', { type: 'Orthogonal', direction: dir, length: len }, true);
                if (insertseg.length === 0) {
                    if (prev && (prev.direction === 'Top' || prev.direction === 'Bottom')) {
                        insertseg.direction = tx > 0 ? 'Right' : 'Left';
                    }
                    else {
                        insertseg.direction = ty > 0 ? 'Bottom' : 'Top';
                    }
                }
                prev = insertseg;
                segments.push(insertseg);
            }
            obj.segments = segments.concat(obj.segments);
            index = 1;
        }
        else {
            segValues = { type: 'Orthogonal', direction: segment.direction, length: segment.length / 3 };
            segments.push(new OrthogonalSegment(obj, 'segments', segValues, true));
            if (segment.direction === 'Bottom' || segment.direction === 'Top') {
                length = Math.abs(tx);
                direction = tx > 0 ? 'Right' : 'Left';
            }
            else {
                length = Math.abs(ty);
                direction = ty > 0 ? 'Bottom' : 'Top';
            }
            insertseg = new OrthogonalSegment(obj, 'segments', { type: 'Orthogonal', direction: direction, length: length }, true);
            segments.push(insertseg);
            var nextseg = obj.segments[1];
            if (nextseg && nextseg.length) {
                nextseg.length = (direction !== nextseg.direction) ? nextseg.length + length : nextseg.length - length;
            }
            index = 2;
            segment.length = 2 * segment.length / 3;
            obj.segments = segments.concat(obj.segments);
        }
        return index;
    };
    ConnectorEditing.prototype.updateAdjacentSegments = function (obj, index, tx, ty) {
        var current = obj.segments[index];
        var endPoint = current.points[current.points.length - 1];
        var startPoint = current.points[0];
        var isNextUpdate = true;
        if (current.type === 'Orthogonal') {
            current.points[0] = startPoint;
            current.points[current.points.length - 1] = endPoint;
            var prev = obj.segments[index - 1];
            if (prev) {
                isNextUpdate = this.updatePreviousSegment(tx, ty, obj, index);
            }
            if (obj.segments.length - 1 > index && isNextUpdate) {
                var nextSegment = obj.segments[index + 1];
                this.updateNextSegment(obj, current, nextSegment, tx, ty);
            }
        }
    };
    ConnectorEditing.prototype.addTerminalSegment = function (connector, segment, tx, ty, segmentIndex) {
        var index = connector.segments.indexOf(segment);
        var first;
        var insertseg;
        var len;
        var dir;
        connector.segments.pop();
        var last = connector.segments[connector.segments.length - 1];
        first = (last && last.type === 'Orthogonal') ? last : null;
        for (var i = 0; i < segment.points.length - 2; i++) {
            len = Point.distancePoints(segment.points[i], segment.points[i + 1]);
            dir = Point.direction(segment.points[i], segment.points[i + 1]);
            insertseg = new OrthogonalSegment(connector, 'segments', { type: 'Orthogonal', length: len, direction: dir }, true);
            connector.segments.push(insertseg);
            first = insertseg;
        }
        var sec = segmentIndex;
        if (segment.points.length === 2 || sec === segment.points.length - 2) {
            if (first) {
                first.length += 5;
            }
            if (sec !== undefined) {
                var newseg = void 0;
                len = 2 * Point.distancePoints(segment.points[segment.points.length - 2], segment.points[segment.points.length - 1]) / 3;
                dir = Point.direction(segment.points[segment.points.length - 2], segment.points[segment.points.length - 1]);
                newseg = new OrthogonalSegment(connector, 'segments', { type: 'Orthogonal', length: len, direction: dir });
                connector.segments.push(newseg);
            }
        }
        var lastseg = new OrthogonalSegment(connector, 'segments', { type: 'Orthogonal' }, true);
        connector.segments.push(lastseg);
        this.commandHandler.updateEndPoint(connector);
        index = index + segmentIndex;
        return index;
    };
    ConnectorEditing.prototype.updatePortSegment = function (prev, connector, index, tx, ty) {
        if (index === 1 && prev.points.length === 2 && prev.length < 0) {
            var source = connector.sourceWrapper.corners;
            var current = connector.segments[index];
            var next = connector.segments[index + 1];
            var newseg = void 0;
            var segment = [];
            newseg = new OrthogonalSegment(connector, 'segments', { type: 'Orthogonal', length: 13, direction: prev.direction });
            segment.push(newseg);
            var len = void 0;
            if (current.direction === 'Left') {
                len = (current.points[0].x - (source.middleLeft.x - 20));
            }
            else if (current.direction === 'Right') {
                len = ((source.middleRight.x + 20) - current.points[0].x);
            }
            else if (current.direction === 'Bottom') {
                len = ((source.bottomCenter.y + 20) - current.points[0].y);
            }
            else {
                len = (current.points[0].y - (source.topCenter.y - 20));
            }
            var dir = current.direction;
            newseg = new OrthogonalSegment(connector, 'segments', { type: 'Orthogonal', length: len, direction: current.direction });
            segment.push(newseg);
            current.length = current.length - len;
            if (next && next.length && next.direction) {
                if (next.direction === prev.direction) {
                    next.length -= 13;
                }
                else if (next.direction === getOppositeDirection(prev.direction)) {
                    next.length += 13;
                }
            }
            connector.segments = segment.concat(connector.segments);
            this.selectedSegment = connector.segments[3];
        }
    };
    ConnectorEditing.prototype.updatePreviousSegment = function (tx, ty, connector, index) {
        var current = connector.segments[index];
        var prev = connector.segments[index - 1];
        var firstSegment = (index === 1) ? true : false;
        prev.points[prev.points.length - 1] = current.points[0];
        var isSourceNode = (connector.sourceID && connector.sourcePortID === '') ? false : true;
        var isNextUpdate = true;
        if (prev.type === 'Orthogonal') {
            if (prev.direction === 'Bottom') {
                prev.length += ty;
            }
            else if (prev.direction === 'Top') {
                prev.length -= ty;
            }
            else if (prev.direction === 'Right') {
                prev.length += tx;
            }
            else {
                prev.length -= tx;
            }
            if (connector.sourcePortID !== '' && prev.length < 0) {
                this.updatePortSegment(prev, connector, index, tx, ty);
            }
            else if (connector.sourceID && connector.sourcePortID === '' && prev.length < 0 && index === 1) {
                isNextUpdate = false;
                this.updateFirstSegment(connector, current);
            }
            if (isSourceNode) {
                this.changeSegmentDirection(prev);
            }
        }
        return isNextUpdate;
    };
    ConnectorEditing.prototype.changeSegmentDirection = function (segment) {
        if (segment.length < 0) {
            segment.direction = getOppositeDirection(segment.direction);
            segment.length *= -1;
        }
    };
    ConnectorEditing.prototype.updateNextSegment = function (obj, current, next, tx, ty) {
        var pt = current.points[current.points.length - 1];
        next.points[0] = current.points[current.points.length - 1];
        if (next && next.type === 'Orthogonal') {
            if (next.length || next.length === 0) {
                if (next.direction === 'Left' || next.direction === 'Right') {
                    if (tx !== 0) {
                        next.length = (next.direction === 'Right') ? next.length - tx : next.length + tx;
                        if (next.length || next.length === 0) {
                            this.changeSegmentDirection(next);
                        }
                    }
                }
                else {
                    if (ty !== 0) {
                        next.length = (next.direction === 'Bottom') ? next.length - ty : next.length + ty;
                        if (next.length || next.length === 0) {
                            this.changeSegmentDirection(next);
                        }
                    }
                }
            }
        }
    };
    ConnectorEditing.prototype.updateFirstSegment = function (connector, selectedSegment) {
        var index = connector.segments.indexOf(selectedSegment);
        var insertfirst = false;
        var current = connector.segments[index];
        var prev = connector.segments[index - 1];
        var con = connector;
        var sourcePoint;
        if (prev.length < 0 && connector.sourceID) {
            var sourceNode = connector.sourceWrapper.corners;
            var segments = [];
            var segValues = void 0;
            var removeCurrentPrev = false;
            this.changeSegmentDirection(current);
            var next = connector.segments[index + 1];
            var nextNext = connector.segments[index + 2];
            if (next) {
                this.changeSegmentDirection(next);
            }
            if (nextNext) {
                this.changeSegmentDirection(nextNext);
            }
            switch (prev.direction) {
                case 'Top':
                case 'Bottom':
                    sourcePoint = (current.length > 0 && current.direction === 'Left') ? sourceNode.middleLeft : sourceNode.middleRight;
                    if (current.length > sourceNode.width / 2) {
                        if (Math.abs(prev.length) < sourceNode.height / 2) {
                            prev.length = Point.distancePoints(sourceNode.center, prev.points[prev.points.length - 1]);
                            current.points[0].x = sourcePoint.x;
                            current.length = Point.distancePoints(current.points[0], current.points[current.points.length - 1]);
                            current.length -= 20;
                            insertfirst = true;
                        }
                    }
                    else {
                        if (next && next.direction && next.length) {
                            next.points[0].y = sourcePoint.y;
                            next.points[0].x = next.points[next.points.length - 1].x = (current.direction === 'Right') ?
                                sourcePoint.x + 20 : sourcePoint.x - 20;
                        }
                        insertfirst = true;
                        removeCurrentPrev = true;
                    }
                    break;
                case 'Left':
                case 'Right':
                    sourcePoint = (current.length > 0 && current.direction === 'Top') ? sourceNode.topCenter : sourceNode.bottomCenter;
                    if (current.length > sourceNode.height / 2) {
                        if (Math.abs(prev.length) < sourceNode.width / 2) {
                            prev.length = Point.distancePoints(sourceNode.center, prev.points[prev.points.length - 1]);
                            current.points[0].y = sourcePoint.y;
                            current.length = Point.distancePoints(current.points[0], current.points[current.points.length - 1]);
                            current.length -= 20;
                            insertfirst = true;
                        }
                    }
                    else {
                        if (next && next.direction && next.length) {
                            next.points[0].x = sourcePoint.x;
                            next.points[0].y = next.points[next.points.length - 1].y = (current.direction === 'Bottom') ?
                                sourcePoint.y + 20 : sourcePoint.y - 20;
                        }
                        insertfirst = true;
                        removeCurrentPrev = true;
                    }
                    break;
            }
            this.changeSegmentDirection(prev);
            this.changeSegmentDirection(current);
            if (insertfirst) {
                segValues = { type: 'Orthogonal', direction: current.direction, length: 20 };
                segments.push(new OrthogonalSegment(connector, 'segments', segValues, true));
                if (removeCurrentPrev) {
                    if (next && next.direction && next.length) {
                        next.length = Point.distancePoints(next.points[0], next.points[next.points.length - 1]);
                    }
                    if (nextNext && nextNext.direction && nextNext.length) {
                        nextNext.length = Point.distancePoints(next.points[next.points.length - 1], nextNext.points[nextNext.points.length - 1]);
                    }
                    connector.segments.splice(index - 1, 2);
                }
                connector.segments = segments.concat(connector.segments);
            }
            this.selectedSegment = ((removeCurrentPrev) ? connector.segments[index - 1] :
                connector.segments[index + 1]);
            this.commandHandler.updateEndPoint(connector);
        }
    };
    ConnectorEditing.prototype.updateLastSegment = function (connector, selectedSegment) {
        if (connector.targetID && connector.targetPortID === '') {
            var line1Start = void 0;
            var line1End = void 0;
            var line2Start = void 0;
            var line2End = void 0;
            var corners = connector.targetWrapper.corners;
            var firstSegPoint = selectedSegment.points[0];
            var lastSegPoint = selectedSegment.points[selectedSegment.points.length - 1];
            if (selectedSegment.direction === 'Right' || selectedSegment.direction === 'Left') {
                line1Start = { x: firstSegPoint.x, y: firstSegPoint.y };
                line1End = {
                    x: (selectedSegment.direction === 'Left') ? lastSegPoint.x - corners.width / 2 : lastSegPoint.x + corners.width / 2,
                    y: lastSegPoint.y
                };
                line2Start = { x: corners.center.x, y: corners.center.y - corners.height };
                line2End = { x: corners.center.x, y: corners.center.y + corners.height };
            }
            else {
                line1Start = { x: firstSegPoint.x, y: firstSegPoint.y };
                line1End = {
                    x: lastSegPoint.x,
                    y: (selectedSegment.direction === 'Bottom') ? lastSegPoint.y + corners.height / 2 : lastSegPoint.y - corners.height / 2
                };
                line2Start = { x: corners.center.x - corners.width, y: corners.center.y };
                line2End = { x: corners.center.x + corners.width, y: corners.center.y };
            }
            var line1 = { x1: line1Start.x, y1: line1Start.y, x2: line1End.x, y2: line1End.y };
            var line2 = { x1: line2Start.x, y1: line2Start.y, x2: line2End.x, y2: line2End.y };
            return (intersect3(line1, line2).enabled);
        }
        return false;
    };
    /**
     * To destroy the connector editing module
     * @return {void}
     * @private
     */
    ConnectorEditing.prototype.destroy = function () {
        /**
         * Destroys the connector editing module
         */
    };
    /**
     * Get module name.
     */
    ConnectorEditing.prototype.getModuleName = function () {
        /**
         * Returns the module name
         */
        return 'ConnectorEditingTool';
    };
    return ConnectorEditing;
}(ToolBase));
export { ConnectorEditing };
