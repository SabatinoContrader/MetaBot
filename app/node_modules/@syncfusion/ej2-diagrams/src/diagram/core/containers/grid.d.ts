import { DiagramElement } from '../elements/diagram-element';
import { Canvas } from './canvas';
import { Container } from './container';
import { Size } from '../../primitives/size';
import { ShapeStyleModel } from '../appearance-model';
/**
 * Grid panel is used to arrange the children in a table like structure
 */
export declare class GridPanel extends Container {
    private childTable;
    private rowDefns;
    columnDefinitions(): ColumnDefinition[];
    private colDefns;
    /** @private */
    rows: GridRow[];
    cellStyle: ShapeStyleModel;
    private desiredRowHeight;
    private desiredCellWidth;
    addObject(obj: DiagramElement, rowId?: number, columnId?: number, rowSpan?: number, columnSpan?: number): void;
    private addObjectToCell;
    /** @private */
    updateProperties(offsetX: number, offsetY: number, width: number, height: number): void;
    /** @private */
    setDefinitions(rows: RowDefinition[], columns: ColumnDefinition[]): void;
    /** @private */
    private addCellInRow;
    /** @private */
    private calculateSize;
    /** @private */
    updateRowHeight(rowId: number, height: number): void;
    /** @private */
    updateColumnWidth(colId: number, width: number): void;
    /** @private */
    addRow(rowId: number, rows: RowDefinition[]): void;
    /** @private */
    addColumn(columnId: number, columns: ColumnDefinition[]): void;
    /** @private */
    removeRow(rowId: number): void;
    /** @private */
    removeColumn(columnId: number): void;
    /** @private */
    updateRowIndex(currentIndex: number, newIndex: number): void;
    /** @private */
    measure(availableSize: Size): Size;
    /** @private */
    arrange(desiredSize: Size, isChange?: boolean): Size;
}
/** @private */
export declare class RowDefinition {
    height: number;
}
/** @private */
export declare class ColumnDefinition {
    width: number;
}
/** @private */
export declare class GridRow {
    cells: GridCell[];
}
/** @private */
export declare class GridCell extends Canvas {
    columnSpan: number;
    rowSpan: number;
    desiredCellWidth: number;
    desiredCellHeight: number;
}
