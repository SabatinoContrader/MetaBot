{"version":3,"file":"ej2-react-diagrams.es2015.js","sources":["../src/es6/diagram/layers-directive.js","../src/es6/diagram/connectors-directive.js","../src/es6/diagram/connector-annotation-directive.js","../src/es6/diagram/nodes-directive.js","../src/es6/diagram/node-annotation-directive.js","../src/es6/diagram/ports-directive.js","../src/es6/diagram/diagram.component.js","../src/es6/symbol-palette/palettes-directive.js","../src/es6/symbol-palette/symbolpalette.component.js","../src/es6/overview/overview.component.js"],"sourcesContent":["import { ComplexBase } from '@syncfusion/ej2-react-base';\n/**\n * `Layers Directive` directive represent a connectors of the react diagram.\n * It must be contained in a Diagram component(`DiagramComponent`).\n * ```tsx\n * <DiagramComponent>\n * <LayersDirective>\n * <LayerDirective></LayerDirective>\n * </LayersDirective>\n * </DiagramComponent>\n * ```\n */\nexport class LayerDirective extends ComplexBase {\n}\nLayerDirective.moduleName = 'layer';\nexport class LayersDirective extends ComplexBase {\n}\nLayersDirective.propertyName = 'layers';\nLayersDirective.moduleName = 'layers';\n","import { ComplexBase } from '@syncfusion/ej2-react-base';\n/**\n * `ConnectorsDirective` directive represent a connectors of the react diagram.\n * It must be contained in a Diagram component(`DiagramComponent`).\n * ```tsx\n * <DiagramComponent>\n * <ConnectorsDirective>\n * <ConnectorDirective></ConnectorDirective>\n * </ConnectorsDirective>\n * </DiagramComponent>\n * ```\n */\nexport class ConnectorDirective extends ComplexBase {\n}\nConnectorDirective.moduleName = 'connector';\nexport class ConnectorsDirective extends ComplexBase {\n}\nConnectorsDirective.propertyName = 'connectors';\nConnectorsDirective.moduleName = 'connectors';\n","import { ComplexBase } from '@syncfusion/ej2-react-base';\n/**\n * `Annotation` directive represent a annotation of the react Diagram.\n * It must be contained in a Diagram component(`DiagramComponent`).\n * ```tsx\n * <DiagramComponent>\n * <ConnectorsDirective>\n * <ConnectorDirective>\n * <ConnectorAnnotationsDirective>\n * <ConnectorAnnotationDirective>\n * </ConnectorAnnotationDirective>\n * </ConnectorAnnotationsDirective>\n * </ConnectorDirective>\n * </ConnectorsDirective>\n * </DiagramComponent>\n * ```\n */\nexport class ConnectorAnnotationDirective extends ComplexBase {\n}\nConnectorAnnotationDirective.moduleName = 'connectorAnnotation';\nexport class ConnectorAnnotationsDirective extends ComplexBase {\n}\nConnectorAnnotationsDirective.propertyName = 'annotations';\nConnectorAnnotationsDirective.moduleName = 'connectorAnnotations';\n","import { ComplexBase } from '@syncfusion/ej2-react-base';\n/**\n * `NodesDirective` directive represent a nodes of the react diagram.\n * It must be contained in a Diagram component(`DiagramComponent`).\n * ```tsx\n * <DiagramComponent>\n * <NodesDirective>\n * <NodeDirective></NodeDirective>\n * </NodesDirective>\n * </DiagramComponent>\n * ```\n */\nexport class NodeDirective extends ComplexBase {\n}\nNodeDirective.moduleName = 'node';\nexport class NodesDirective extends ComplexBase {\n}\nNodesDirective.propertyName = 'nodes';\nNodesDirective.moduleName = 'nodes';\n","import { ComplexBase } from '@syncfusion/ej2-react-base';\n/**\n * `Node` directive represent a annotation of the react Diagram.\n * It must be contained in a Diagram component(`DiagramComponent`).\n * ```tsx\n * <DiagramComponent>\n * <NodesDirective>\n * <NodeDirective>\n * <NodeAnnotationsDirective>\n * <NodeAnnotationDirective>\n * </NodeAnnotationDirective>\n * </NodeAnnotationsDirective>\n * </NodeDirective>\n * </NodesDirective>\n * </DiagramComponent>\n * ```\n */\nexport class NodeAnnotationDirective extends ComplexBase {\n}\nNodeAnnotationDirective.moduleName = 'nodeAnnotation';\nexport class NodeAnnotationsDirective extends ComplexBase {\n}\nNodeAnnotationsDirective.propertyName = 'annotations';\nNodeAnnotationsDirective.moduleName = 'nodeAnnotations';\n","import { ComplexBase } from '@syncfusion/ej2-react-base';\n/**\n * `Node` directive represent a port of the react Diagram.\n * It must be contained in a Diagram component(`DiagramComponent`).\n * ```tsx\n * <DiagramComponent>\n * <NodesDirective>\n * <NodeDirective>\n * <PortCollectionDirective>\n * <PortDirective>\n * </PortDirective>\n * </PortCollectionDirective>\n * </NodeDirective>\n * </NodesDirective>\n * </DiagramComponent>\n * ```\n */\nexport class PortDirective extends ComplexBase {\n}\nPortDirective.moduleName = 'port';\nexport class PortsDirective extends ComplexBase {\n}\nPortsDirective.propertyName = 'ports';\nPortsDirective.moduleName = 'ports';\n","import * as React from 'react';\nimport { Diagram } from '@syncfusion/ej2-diagrams';\nimport { ComponentBase, applyMixins } from '@syncfusion/ej2-react-base';\n/**\n * Represents react Diagram Component\n * ```tsx\n * <DiagramComponent></DiagramComponent>\n * ```\n */\nexport class DiagramComponent extends Diagram {\n    constructor(props) {\n        super(props);\n        this.initRenderCalled = false;\n        this.checkInjectedModules = true;\n        this.directivekeys = { 'layers': 'layer', 'connectors': { 'connector': { 'connectorAnnotations': 'connectorAnnotation' } }, 'nodes': { 'node': { 'nodeAnnotations': 'nodeAnnotation', 'ports': 'port' } } };\n    }\n    render() {\n        if ((this.element && !this.initRenderCalled) || this.refreshing) {\n            super.render();\n            this.initRenderCalled = true;\n        }\n        else {\n            return React.createElement('div', this.getDefaultAttributes(), this.props.children);\n        }\n    }\n}\napplyMixins(DiagramComponent, [ComponentBase, React.PureComponent]);\n","import { ComplexBase } from '@syncfusion/ej2-react-base';\n/**\n * `Palette` directive represent a axis palette of the react SymbolPalette.\n * It must be contained in a SymbolPalette component(`SymbolPaletteComponent`).\n * ```tsx\n * <SymbolPaletteComponent>\n * <PalettesDirective>\n * <PaletteDirective></PaletteDirective>\n * </PalettesDirective>\n * </SymbolPaletteComponent>\n * ```\n */\nexport class PaletteDirective extends ComplexBase {\n}\nPaletteDirective.moduleName = 'palette';\nexport class PalettesDirective extends ComplexBase {\n}\nPalettesDirective.propertyName = 'palettes';\nPalettesDirective.moduleName = 'palettes';\n","import * as React from 'react';\nimport { SymbolPalette } from '@syncfusion/ej2-diagrams';\nimport { ComponentBase, applyMixins } from '@syncfusion/ej2-react-base';\n/**\n * Represents react SymbolPalette Component\n * ```tsx\n * <SymbolPaletteComponent></SymbolPaletteComponent>\n * ```\n */\nexport class SymbolPaletteComponent extends SymbolPalette {\n    constructor(props) {\n        super(props);\n        this.initRenderCalled = false;\n        this.checkInjectedModules = true;\n        this.directivekeys = { 'palettes': 'palette' };\n    }\n    render() {\n        if ((this.element && !this.initRenderCalled) || this.refreshing) {\n            super.render();\n            this.initRenderCalled = true;\n        }\n        else {\n            return React.createElement('div', this.getDefaultAttributes(), this.props.children);\n        }\n    }\n}\napplyMixins(SymbolPaletteComponent, [ComponentBase, React.PureComponent]);\n","import * as React from 'react';\nimport { Overview } from '@syncfusion/ej2-diagrams';\nimport { ComponentBase, applyMixins } from '@syncfusion/ej2-react-base';\n/**\n * Represents react Overview Component\n * ```tsx\n * <OverviewComponent></OverviewComponent>\n * ```\n */\nexport class OverviewComponent extends Overview {\n    constructor(props) {\n        super(props);\n        this.initRenderCalled = false;\n        this.checkInjectedModules = false;\n    }\n    render() {\n        if ((this.element && !this.initRenderCalled) || this.refreshing) {\n            super.render();\n            this.initRenderCalled = true;\n        }\n        else {\n            return React.createElement('div', this.getDefaultAttributes(), this.props.children);\n        }\n    }\n}\napplyMixins(OverviewComponent, [ComponentBase, React.PureComponent]);\n"],"names":["React.createElement","React.PureComponent"],"mappings":"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"}